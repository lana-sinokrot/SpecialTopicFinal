{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Admin credentials\nconst ADMIN_EMAIL = 'admin@htu.edu.jo';\nconst ADMIN_PASSWORD = 'Admin@123';\nconst register = async (firstName, lastName, email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      first_name: firstName,\n      last_name: lastName,\n      email,\n      password\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nconst login = async (email, password) => {\n  try {\n    console.log('Login attempt:', {\n      email,\n      isAdmin: email === ADMIN_EMAIL\n    });\n\n    // Check for admin credentials first\n    if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\n      console.log('Admin login successful');\n      const adminData = {\n        token: 'admin-token',\n        user_id: 'admin',\n        first_name: 'Admin',\n        last_name: 'User',\n        email: ADMIN_EMAIL,\n        isAdmin: true\n      };\n      localStorage.setItem('user', JSON.stringify(adminData));\n      return adminData;\n    }\n\n    // If not admin, proceed with regular login\n    console.log('Regular user login attempt');\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password\n    });\n    if (response.data.token) {\n      const userData = {\n        token: response.data.token,\n        user_id: response.data.user_id,\n        first_name: response.data.first_name,\n        last_name: response.data.last_name,\n        email: response.data.email,\n        isAdmin: false\n      };\n      localStorage.setItem('user', JSON.stringify(userData));\n      return userData;\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\nconst logout = () => {\n  console.log('Logging out user');\n  localStorage.removeItem('user');\n};\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) {\n    const user = JSON.parse(userStr);\n    console.log('Current user from storage:', user);\n    return user;\n  }\n  console.log('No user found in storage');\n  return null;\n};\nconst updateCurrentUser = userData => {\n  const currentUser = getCurrentUser();\n  const updatedUser = {\n    ...currentUser,\n    ...userData\n  };\n  localStorage.setItem('user', JSON.stringify(updatedUser));\n  return updatedUser;\n};\nconst authService = {\n  login,\n  register,\n  logout,\n  getCurrentUser,\n  updateCurrentUser\n};\nexport default authService;","map":{"version":3,"names":["axios","API_URL","ADMIN_EMAIL","ADMIN_PASSWORD","register","firstName","lastName","email","password","response","post","first_name","last_name","data","error","login","console","log","isAdmin","adminData","token","user_id","localStorage","setItem","JSON","stringify","userData","logout","removeItem","getCurrentUser","userStr","getItem","user","parse","updateCurrentUser","currentUser","updatedUser","authService"],"sources":["C:/Users/Lana Sinokrot/Desktop/Test-test/frontend/src/services/auth.service.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\n// Admin credentials\nconst ADMIN_EMAIL = 'admin@htu.edu.jo';\nconst ADMIN_PASSWORD = 'Admin@123';\n\nconst register = async (firstName, lastName, email, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/auth/register`, {\n      first_name: firstName,\n      last_name: lastName,\n      email,\n      password,\n    });\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst login = async (email, password) => {\n  try {\n    console.log('Login attempt:', { email, isAdmin: email === ADMIN_EMAIL });\n    \n    // Check for admin credentials first\n    if (email === ADMIN_EMAIL && password === ADMIN_PASSWORD) {\n      console.log('Admin login successful');\n      const adminData = {\n        token: 'admin-token',\n        user_id: 'admin',\n        first_name: 'Admin',\n        last_name: 'User',\n        email: ADMIN_EMAIL,\n        isAdmin: true\n      };\n      localStorage.setItem('user', JSON.stringify(adminData));\n      return adminData;\n    }\n\n    // If not admin, proceed with regular login\n    console.log('Regular user login attempt');\n    const response = await axios.post(`${API_URL}/auth/login`, {\n      email,\n      password,\n    });\n\n    if (response.data.token) {\n      const userData = {\n        token: response.data.token,\n        user_id: response.data.user_id,\n        first_name: response.data.first_name,\n        last_name: response.data.last_name,\n        email: response.data.email,\n        isAdmin: false\n      };\n      localStorage.setItem('user', JSON.stringify(userData));\n      return userData;\n    }\n  } catch (error) {\n    console.error('Login error:', error);\n    throw error;\n  }\n};\n\nconst logout = () => {\n  console.log('Logging out user');\n  localStorage.removeItem('user');\n};\n\nconst getCurrentUser = () => {\n  const userStr = localStorage.getItem('user');\n  if (userStr) {\n    const user = JSON.parse(userStr);\n    console.log('Current user from storage:', user);\n    return user;\n  }\n  console.log('No user found in storage');\n  return null;\n};\n\nconst updateCurrentUser = (userData) => {\n  const currentUser = getCurrentUser();\n  const updatedUser = { ...currentUser, ...userData };\n  localStorage.setItem('user', JSON.stringify(updatedUser));\n  return updatedUser;\n};\n\nconst authService = {\n  login,\n  register,\n  logout,\n  getCurrentUser,\n  updateCurrentUser\n};\n\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}